geom_boxplot(
aes(
x = factor(year),
y = corn_yield,
fill = state_name
)
)
county_yield_s_b2010 <- county_yield %>%
filter(year >= 2005, year <= 2010)
county_yield
county_yield <-
here::here("Chapter-4-DataVisualization/county_yield.rds") %>%
readRDS() %>%
select(-geometry)
county_yield_s_b2010 <- county_yield %>%
filter(year >= 2005, year <= 2010)
g_box <- ggplot(data = county_yield_s_b2010) +
geom_boxplot(
aes(
x = factor(year),
y = corn_yield,
fill = state_name
)
)
g_box
as.character(2000:2018)
2000:2018
as.character(2000:2018)
gsub("20", "", as.character(2000:2018))
library(nycflights13)
gg_delay <- flights %>%
group_by(origin, month) %>%
summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
ggplot(.) +
geom_line(aes(y = mean_arr_delay, x = month, color = origin))
gg_delay
gg_delay +
scale_x_continuous(
name = "Month",
limit = c(4, 8)
)
gg_delay +
scale_x_continuous(
name = "Month",
limit = c(4, 8),
breaks = 4:8
)
gg_delay +
scale_x_continuous(
name = "Month",
limit = c(4, 8),
breaks = 4:8
) +
scale_y_continuous(
name = "Average Arrival Delay (minutes)",
limit = c(0, 25)
)
gg_delay +
scale_x_continuous(
name = "Month",
limit = c(4, 8),
breaks = 4:8
) +
ylabel("Average Arrival Delay (minutes)") +
ylim(0, 25)
library(ggplot2)
gg_delay +
scale_x_continuous(
name = "Month",
limit = c(4, 8),
breaks = 4:8
) +
ylab("Average Arrival Delay (minutes)") +
ylim(0, 25)
gg_delay +
scale_x_continuous(
name = "Month",
limit = c(4, 8),
breaks = 4:8
) +
ylab("Average Arrival Delay (minutes)") +
ylim(0, 25)
gg_delay +
scale_x_continuous(
name = "Month",
limit = c(4, 8),
breaks = 4:8
) +
ylab("Average Arrival Delay (minutes)") +
ylim(0, 25)
g_axis <- g_box +
scale_x_discrete(
name = "Year",
label = gsub("20", "", as.character(2000:2018))
) +
scale_y_continuous(
name = "Corn Yield (bu/acre)",
limit = c(100, 200),
breaks = seq(100, 200, by = 10)
)
g_axis
g_axis +
labs(fill = "State")
g_axis +
labs(color = "State")
library(nycflights13)
gg_delay <- flights %>%
group_by(origin, month) %>%
summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
ggplot(.) +
geom_line(aes(y = mean_arr_delay, x = month, color = origin))
gg_delay
gg_delay +
scale_color_brewer(
name = "Airports in NY",
guide = guide_legend(
title.position = "bottom",
nrow = 1
)
)
g_axis
g_axis +
theme(
axis.title.x = element_text(size = 8, color = "red"),
axis.text = element_text(size = 14, family = "Times")
)
install.packages("ggthemes")
install.packages("extrafont")
library(extrafont)
font_import()
library(extrafont)
#--- load fonts ---#
loadfonts()
square_it <- function(a) {
#--- 1. do something on x ---#
squared_a <- a^2
#--- 2. return the results ---#
return(squared_a)
}
square_it(10)
square_it(20)
square_and_sqrt_it <- function(a) {
#--- 1. do something on x ---#
squared_a <- a^2
original_a <- sqrt(squared_a)
#--- 2. return the results ---#
return(original_a)
}
square_and_sqrt_it <- function(a) {
#--- 1. do something on x ---#
squared_a <- a^2
original_a <- sqrt(squared_a)
#--- 2. return the results ---#
return(original_a)
}
square_and_sqrt_it(8)
square_multiply_it <- function(a) {
#--- 1. do something on a ---#
squared_a <- a^2
z <- multiplier * squared_a
#--- 2. return the results ---#
return(z)
}
square_multiply_it(10)
multiplier <- 10
square_multiply_it(10)
est_yield <- function(a){
b <- 120 + 25 * log(a)
return(b)
}
est_yield(20)
library(tidyverse)
library(data.table)
county_yield <-
here::here("Chapter-4-DataVisualization/county_yield.rds") %>%
readRDS() %>%
select(-geometry)
get_profit <- function(N, P_C, P_N) {
yield <- 120 + 25 * log(N)
profit <- P_C * yield - P_N * N
return(profit)
}
data.frame(N = seq(0.1, 300, by = 0.1))
data.frame(N = seq(0.1, 300, by = 100))
data.frame(N = seq(0, 300, by = 100))
data.frame(N = seq(0.1, 300, by = 0.1))
data.frame(N = seq(0.1, 300, by = 0.1)) %>%
mutate(profit = get_profit(N, 3.5, 0.4))
data_main <-
data.frame(N = seq(0.1, 300, by = 0.1)) %>%
mutate(profit = get_profit(N, 3.5, 0.4))
data_main
data.frame(N = seq(0.1, 300, by = 0.1)) %>%
mutate(profit = get_profit(N, 3.5, 0.4)) %>%
filter(profit == max(profit))
P_C_seq <- seq(2.5, 4.5, by = 1)
P_N_seq <- seq(0.2, 0.6, by = 0.2)
P_C_seq
P_N_seq
price_parameters <- expand.grid(P_C = P_C_seq, P_N = P_N_seq) %>%
tibble()
price_parameters
i = 1
price_parameters[i, ]
P_C <- price_parameters[i, ]$P_C
P_C
P_N <- price_parameters[i, ]$P_N
P_N
N_data <- tibble(N = seq(0.1, 300, by = 0.1))
N_data
mutate(N_data, profit = get_profit(N, P_C, P_N))
mutate(N_data, profit = get_profit(N, P_C, P_N)) %>%
filter(profit == max(profit))
mutate(N_data, profit = get_profit(N, P_C, P_N)) %>%
filter(profit == max(profit)) %>%
mutate(P_C = P_C) %>%
mutate(P_N = P_N)
get_opt_N <- function(i) {
P_C <- price_parameters[i, ]$P_C
P_N <- price_parameters[i, ]$P_N
N_data <- tibble(N = seq(0.1, 300, by = 0.1))
opt_N <- mutate(N_data, profit = get_profit(N, P_C, P_N)) %>%
filter(profit == max(profit)) %>%
mutate(P_C = P_C) %>%
mutate(P_N = P_N)
return(opt_N)
}
price_parameters
i = 1
price_parameters[i, ]$P_C
price_parameters[i, ]$P_N
N_data <- tibble(N = seq(0.1, 300, by = 0.1))
N_data
mutate(N_data, profit = get_profit(N, P_C, P_N))
P_C
P_N
opt_N <- mutate(N_data, profit = get_profit(N, P_C, P_N))
View(opt_N)
mutate(N_data, profit = get_profit(N, P_C, P_N)) %>%
filter(profit == max(profit))
mutate(N_data, profit = get_profit(N, P_C, P_N)) %>%
filter(profit == max(profit)) %>%
mutate(P_C = P_C) %>%
mutate(P_N = P_N)
get_opt_N <- function(i) {
P_C <- price_parameters[i, ]$P_C
P_N <- price_parameters[i, ]$P_N
N_data <- tibble(N = seq(0.1, 300, by = 0.1))
opt_N <- mutate(N_data, profit = get_profit(N, P_C, P_N)) %>%
filter(profit == max(profit)) %>%
mutate(P_C = P_C) %>%
mutate(P_N = P_N)
return(opt_N)
}
price_parameters
get_opt_N(2)
get_opt_N(3)
get_opt_N(4)
get_opt_N(5)
get_opt_N(6)
get_opt_N(7)
get_opt_N(8)
get_opt_N(9)
1:nrow(price_parameters)
opt_N_all_ls <- lapply(1:nrow(price_parameters), get_opt_N)
opt_N_all_ls
opt_N_all_ls <- lapply(1:nrow(price_parameters), get_opt_N) %>% bind_rows()
opt_N_all_ls
P_C_seq <- seq(2.5, 4.5, by = 1)
P_N_seq <- seq(0.3, 0.6, by = 0.3)
N_seq <- seq(100, 300, by = 100)
P_C_seq
P_N_seq
N_seq
(
price_parameters <- expand.grid(P_C = P_C_seq, P_N = P_N_seq, N = N_seq) %>%
tibble() %>%
arrange(P_C, P_N)
)
N_seq <- seq(100, 300, by = 10)
N_seq
P_C_seq <- seq(2.5, 4.5, by = 1)
P_N_seq <- seq(0.3, 0.6, by = 0.3)
N_seq <- seq(100, 300, by = 10)
(
price_parameters <- expand.grid(P_C = P_C_seq, P_N = P_N_seq, N = N_seq) %>%
tibble() %>%
arrange(P_C, P_N)
)
price_parameters
profit_data <- mutate(price_parameters, profit = get_profit(N, P_C, P_N))
profit_data
P_C_seq <- seq(2.5, 4.5, by = 1)
P_N_seq <- seq(0.3, 0.6, by = 0.3)
N_seq <- seq(100, 300, by = 100)
(
price_parameters <- expand.grid(P_C = P_C_seq, P_N = P_N_seq, N = N_seq) %>%
tibble() %>%
arrange(P_C, P_N)
)
profit_data <- mutate(price_parameters, profit = get_profit(N, P_C, P_N))
profit_data
profit_data %>%
group_by(P_C, P_N) %>%
arrange(profit)
profit_data %>%
group_by(P_C, P_N) %>%
arrange(profit) %>%
slice(n())
profit_data %>%
group_by(P_C, P_N) %>%
arrange(profit)
profit_data %>%
group_by(P_C, P_N) %>%
arrange(profit) %>%
slice(n())
county_yield
install.packages("microbenchmark")
install.packages("mapview")
install.packages("flipbookr")
install.packages("extrafontdb")
install.packages("Rttf2pt1")
font_import()
library(extrafont)
font_import()
font_import()
install.packages("ggcorrplot")
install.packages("ggalt")
install.packages("rmarkdown")
N <- 2
T <- 2
set.seed(582374)
price_data <- data.frame(
price = runif(N * T, min = 2, max = 6),
county = c(rep('Lancaster',2),rep('Douglas',2)),
year = c(2015, 2016, 2015, 2016)
)
yield_data <- data.frame(
yield = runif(N * T, min = 180, max = 280),
county = c('Lancaster','Douglas','Lancaster','Douglas'),
year = c(2015, 2015, 2016, 2016)
)
price_data
yield_data
yield_data <- data.frame(
yield = runif(6, min = 180, max = 280),
county = c("Lancaster", "Douglas", "Chase", "Lancaster", "Douglas", "Chase"),
year = c(2015, 2015, 2015, 2016, 2016, 2016)
)
yield_data
flights_Jan <- flights %>%
filter(month == 1) %>%
select(month, day, dep_delay, origin)
library(tidyverse)
flights_Jan <- flights %>%
filter(month == 1) %>%
select(month, day, dep_delay, origin)
daily_temp_Jan <- weather %>%
filter(month == 1) %>%
group_by(origin, month, day) %>%
summarize(temp = mean(temp))
hourly_temp_Jan <- weather %>%
filter(month == 1) %>%
select(origin, month, day, hour, temp)
library(nycflights13)
flights_Jan <- flights %>%
filter(month == 1) %>%
select(month, day, dep_delay, origin)
daily_temp_Jan <- weather %>%
filter(month == 1) %>%
group_by(origin, month, day) %>%
summarize(temp = mean(temp))
hourly_temp_Jan <- weather %>%
filter(month == 1) %>%
select(origin, month, day, hour, temp)
flights_Jan
daily_temp_Jan
left_join(flights_jan, daily_temp_Jan, by = c("origin", "day", "month"))
left_join(flights_Jan, daily_temp_Jan, by = c("origin", "day", "month"))
hourly_temp_Jan
flights_Jan
left_join(flights_Jan, hourly_temp_Jan, by = c("origin", "day", "month"))
?merge
getwd()
county_yield <- readRDS("Chapter-4-DataVisualization/county_yield.rds")
mean_yield <- county_yield %>%
group_by(year) %>%
summarize(
corn_yield = mean(corn_yield, na.rm = TRUE)
) %>%
filter(!is.na(year))
mean_yield <-
county_yield %>%
data.table() %>%
group_by(year) %>%
summarize(
corn_yield = mean(corn_yield, na.rm = TRUE)
) %>%
filter(!is.na(year))
library(data.table)
mean_yield <-
county_yield %>%
data.table() %>%
group_by(year) %>%
summarize(
corn_yield = mean(corn_yield, na.rm = TRUE)
) %>%
filter(!is.na(year))
mean_yield <-
county_yield %>%
data.table() %>%
.[, geometry := NULL] %>%
group_by(year) %>%
summarize(
corn_yield = mean(corn_yield, na.rm = TRUE)
) %>%
filter(!is.na(year))
mean_yield
ggplot(data = mean_yield) +
geom_line(aes(x = year, y = corn_yield))
ggplot(data = mean_yield) +
geom_line(x = year, y = corn_yield)
data('diamonds')
premium <- diamonds %>%
filter(
cut=='Premium' & color %in% c('E','I','F')
)
#--- take a look ---#
premium
ggplot(data = premium) +
geom_histogram(aes(x = price), color = "blue", fill = "white")
paste0("R", " rocks")
set.seed(893269)
#--- the number of observations ---#
# this is what we change
N <- 10 # number of observations
B <- 1000 # number of iterations
p <- 0.3 # mean of the Bernoulli distribution
storage <- rep(0, B)
#--- draw from Bern[0.3] (x distributed as Bern[0.3]) ---#
x_seq <- runif(N) <= p
x_seq
p
#--- draw from Bern[0.3] (x distributed as Bern[0.3]) ---#
x_seq <- runif(N) <= p
x_seq
#--- sample mean ---#
x_mean <- mean(x_seq)
x_mean
#--- normalize ---#
lhs <- sqrt(N) * (x_mean - p)
lhs
#--- the number of observations ---#
# this is what we change
N <- 10 # number of observations
B <- 1000 # number of iterations
p <- 0.3 # mean of the Bernoulli distribution
storage <- rep(0, B)
for (i in 1:B) {
#--- draw from Bern[0.3] (x distributed as Bern[0.3]) ---#
x_seq <- runif(N) <= p
#--- sample mean ---#
x_mean <- mean(x_seq)
#--- normalize ---#
lhs <- sqrt(N) * (x_mean - p)
#--- save lhs to storage ---#
storage[i] <- lhs
}
data_pdf <- data.frame(
x = seq(-2, 2, length = 1000),
y = dnorm(seq(-2, 2, length = 1000), sd = sqrt(p * (1 - p)))
)
g_N_10 <-
ggplot() +
geom_density(
data = data.frame(x = storage),
aes(x = x, color = "sample distribution")
) +
geom_line(
data = data_pdf,
aes(y = y, x = x, color = "pdf of N(0,0.21)")
) +
scale_color_manual(
values = c("sample distribution" = "blue", "pdf of N(0,0.21)" = "red"),
name = ""
) +
theme(
legend.position = "bottom"
)
library(tidyverse)
data_pdf <- data.frame(
x = seq(-2, 2, length = 1000),
y = dnorm(seq(-2, 2, length = 1000), sd = sqrt(p * (1 - p)))
)
g_N_10 <-
ggplot() +
geom_density(
data = data.frame(x = storage),
aes(x = x, color = "sample distribution")
) +
geom_line(
data = data_pdf,
aes(y = y, x = x, color = "pdf of N(0,0.21)")
) +
scale_color_manual(
values = c("sample distribution" = "blue", "pdf of N(0,0.21)" = "red"),
name = ""
) +
theme(
legend.position = "bottom"
)
g_N_10
