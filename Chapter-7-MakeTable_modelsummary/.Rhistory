estiamtes_strage <- matrix(0, B, 2)
for (i in 1:B) { # iterate the same process B times
#--- data generation ---#
x1 <- rnorm(N) # independent variable
x2 <- rnorm(N) # independent variable
u <- rnorm(N) # error
y <- 1 + x1 + 0 * x2 + u # dependent variable
data <- data.frame(y = y, x1 = x1, x2 = x2)
#--- OLS ---#
beta_ee1 <- feols(y ~ x1, data = data)$coefficient["x1"] # OLS with EE1
beta_ee2 <- feols(y ~ x1 + x2, data = data)$coefficient["x1"] # OLS with EE2
#--- store estimates ---#
estiamtes_strage[i, 1] <- beta_ee1
estiamtes_strage[i, 2] <- beta_ee2
}
estiamtes_strage
for (i in 1:B) { # iterate the same process B times
#--- data generation ---#
x1 <- rnorm(N) # independent variable
x2 <- rnorm(N) # independent variable
u <- rnorm(N) # error
y <- 1 + x1 + 0 * x2 + u # dependent variable
data <- data.frame(y = y, x1 = x1, x2 = x2)
#--- OLS ---#
beta_ee1 <- feols(y ~ x1, data = data)$coefficient["x1"] # OLS with EE1
beta_ee2 <- feols(y ~ x1 + x2, data = data)$coefficient["x1"] # OLS with EE2
#--- store estimates ---#
estiamtes_strage[i, 1] <- beta_ee1
estiamtes_strage[i, 2] <- beta_ee2
}
b_ee1 <- data.table(
bhat = estiamtes_strage[, 1],
type = "EE 1"
)
library(data.table)
b_ee1 <- data.table(
bhat = estiamtes_strage[, 1],
type = "EE 1"
)
b_ee2 <- data.table(
bhat = estiamtes_strage[, 2],
type = "EE 2"
)
plot_data <- rbind(b_ee1, b_ee2)
plot_data
g_case_1 <- ggplot(data = plot_data) +
geom_density(aes(x = bhat, fill = type), alpha = 0.5) +
scale_fill_discrete(name = "Estimating Equation") +
theme(legend.position = "bottom")
g_case_1
g_case_1
set.seed(37834)
N <- 100 # sample size
B <- 1000 # the number of iterations
estiamtes_strage <- matrix(0, B, 2)
for (i in 1:B) { # iterate the same process B times
#--- data generation ---#
mu <- rnorm(N) # common term shared by x1 and x2
x1 <- 0.1 * rnorm(N) + 0.9 * mu # independent variable
x2 <- 0.1 * rnorm(N) + 0.9 * mu # independent variable
u <- rnorm(N) # error
y <- 1 + x1 + 0 * x2 + u # dependent variable
data <- data.frame(y = y, x1 = x1, x2 = x2)
#--- OLS ---#
beta_ee1 <- feols(y ~ x1, data = data)$coefficient["x1"] # OLS with EE1
beta_ee2 <- feols(y ~ x1 + x2, data = data)$coefficient["x1"] # OLS with EE2
#--- store estimates ---#
estiamtes_strage[i, 1] <- beta_ee1
estiamtes_strage[i, 2] <- beta_ee2
}
#--------------------------
# Visualize the results
#--------------------------
b_ee1 <- data.table(
bhat = estiamtes_strage[, 1],
type = "EE 1"
)
b_ee2 <- data.table(
bhat = estiamtes_strage[, 2],
type = "EE 2"
)
plot_data <- rbind(b_ee1, b_ee2)
g_case_2 <- ggplot(data = plot_data) +
geom_density(aes(x = bhat, fill = type), alpha = 0.5) +
scale_fill_discrete(name = "Estimating Equation") +
theme(legend.position = "bottom")
g_case_2
#--------------------------
# Monte Carlo Simulation
#--------------------------
set.seed(37834)
N <- 100 # sample size
B <- 1000 # the number of iterations
estiamtes_strage <- matrix(0, B, 2)
for (i in 1:B) { # iterate the same process B times
#--- data generation ---#
x1 <- rnorm(N) # independent variable
x2 <- rnorm(N) # independent variable
u <- rnorm(N) # error
y <- 1 + x1 + x2 + u # dependent variable
data <- data.frame(y = y, x1 = x1, x2 = x2)
#--- OLS ---#
beta_ee1 <- feols(y ~ x1, data = data)$coefficient["x1"] # OLS with EE1
beta_ee2 <- feols(y ~ x1 + x2, data = data)$coefficient["x1"] # OLS with EE2
#--- store estimates ---#
estiamtes_strage[i, 1] <- beta_ee1
estiamtes_strage[i, 2] <- beta_ee2
}
#--------------------------
# Visualize the results
#--------------------------
b_ee1 <- data.table(
bhat = estiamtes_strage[, 1],
type = "EE 1"
)
b_ee2 <- data.table(
bhat = estiamtes_strage[, 2],
type = "EE 2"
)
plot_data <- rbind(b_ee1, b_ee2)
g_case_3 <- ggplot(data = plot_data) +
geom_density(aes(x = bhat, fill = type), alpha = 0.5) +
scale_fill_discrete(name = "Estimating Equation") +
theme(legend.position = "bottom")
g_case_3
set.seed(37834)
N <- 100 # sample size
B <- 1000 # the number of iterations
estiamtes_strage <- matrix(0, B, 2)
for (i in 1:B) { # iterate the same process B times
#--- data generation ---#
mu <- rnorm(N) # common term shared by x1 and x2
x1 <- 0.1 * rnorm(N) + 0.9 * mu # independent variable
x2 <- 0.1 * rnorm(N) + 0.9 * mu # independent variable
u <- rnorm(N) # error
y <- 1 + x1 + 1 * x2 + u
data <- data.frame(y = y, x1 = x1, x2 = x2)
#--- OLS ---#
beta_ee1 <- feols(y ~ x1, data = data)$coefficient["x1"] # OLS with EE1
beta_ee2 <- feols(y ~ x1 + x2, data = data)$coefficient["x1"] # OLS with EE2
#--- store estimates ---#
estiamtes_strage[i, 1] <- beta_ee1
estiamtes_strage[i, 2] <- beta_ee2
}
#--------------------------
# Visualize the results
#--------------------------
b_ee1 <- data.table(
bhat = estiamtes_strage[, 1],
type = "EE 1"
)
b_ee2 <- data.table(
bhat = estiamtes_strage[, 2],
type = "EE 2"
)
plot_data <- rbind(b_ee1, b_ee2)
g_case_4 <- ggplot(data = plot_data) +
geom_density(aes(x = bhat, fill = type), alpha = 0.5) +
scale_fill_discrete(name = "Estimating Equation") +
theme(legend.position = "bottom")
g_case_4
mu <- rnorm(N) # common term shared by x1 and x2
x1 <- 0.1 * rnorm(N) + 0.9 * mu # independent variable
x2 <- 0.1 * rnorm(N) + 0.9 * mu # independent variable
u <- rnorm(N) # error
y <- 1 + x1 + 1 * x2 + u
cor(x1, x2)
cor(x1, x2)
plot(x1, x2)
x1 <- rnorm(N) # independent variable
x2 <- rnorm(N) # independent variable
u <- rnorm(N) # error
plot(x1, x2)
cor(x1, x2)
plot(x1, x2)
x1 <- 0.1 * rnorm(N) + 0.9 * mu # independent variable
x2 <- 0.1 * rnorm(N) + 0.9 * mu # independent variable
plot(x1, x2)
plot(x1, x2)
cor(x1, x2)
g_case_4
get_profit <- function(N, P_C, P_N) {
yield <- 120 + 25 * log(N)
profit <- P_C * yield - P_N * N
return(profit)
}
tibble(N = seq(0.1, 300, by = 0.1))
library(tidyverse)
tibble(N = seq(0.1, 300, by = 0.1))
seq(0.1, 300, by = 0.1)
tibble(N = seq(0.1, 300, by = 0.1))
data.frame(N = seq(0.1, 300, by = 0.1))
data_main <-
data.frame(N = seq(0.1, 300, by = 0.1)) %>%
mutate(profit = get_profit(N, 3.5, 0.4))
data_main
ggplot(data = data_main) +
geom_point(aes(y = profit, x = N))
ggplot(data = data_main) +
geom_point(aes(y = profit, x = N), size = 0.1)
filter(data_main, profit == max(profit))
P_N <- price_parameters[i, ]$P_N
P_C_seq <- seq(2.5, 4.5, by = 1)
P_N_seq <- seq(0.2, 0.6, by = 0.2)
price_parameters <- expand.grid(P_C = P_C_seq, P_N = P_N_seq) %>%
tibble()
P_N <- price_parameters[i, ]$P_N
i = 1
P_N <- price_parameters[i, ]$P_N
N_data <- tibble(N = seq(0.1, 300, by = 0.1))
opt_N <- mutate(N_data, profit = get_profit(N, P_C, P_N)) %>%
filter(profit == max(profit))
P_C <- price_parameters[i, ]$P_C
P_N <- price_parameters[i, ]$P_N
N_data <- tibble(N = seq(0.1, 300, by = 0.1))
opt_N <- mutate(N_data, profit = get_profit(N, P_C, P_N)) %>%
filter(profit == max(profit))
opt_N
opt_N
P_C
P_N
opt_N <- mutate(N_data, profit = get_profit(N, P_C, P_N)) %>%
filter(profit == max(profit)) %>%
mutate(P_C = P_C) %>%
mutate(P_N = P_N)
opt_N
get_opt_N <- function(i) {
P_C <- price_parameters[i, ]$P_C
P_N <- price_parameters[i, ]$P_N
N_data <- tibble(N = seq(0.1, 300, by = 0.1))
opt_N <- mutate(N_data, profit = get_profit(N, P_C, P_N)) %>%
filter(profit == max(profit)) %>%
mutate(P_C = P_C) %>%
mutate(P_N = P_N)
return(opt_N)
}
get_opt_N(2)
get_opt_N(3)
price_parameters
1:nrow(price_parameters)
opt_N_all_ls <- future_lapply(1:nrow(price_parameters), get_opt_N)
library(future.apply)
opt_N_all_ls <- lapply(1:nrow(price_parameters), get_opt_N)
opt_N_all_ls
opt_N_all_ls <- lapply(1:nrow(price_parameters), get_opt_N) %>% bind_rows()
opt_N_all_ls
P_C_seq <- seq(2.5, 4.5, by = 1)
P_N_seq <- seq(0.3, 0.6, by = 0.3)
N_seq <- seq(100, 300, by = 0.1)
(
price_parameters <- expand.grid(P_C = P_C_seq, P_N = P_N_seq, N = N_seq) %>%
tibble() %>%
arrange(P_C, P_N)
)
length(P_C_seq)
length(P_N_seq)
length(N_seq)
P_C_seq <- seq(2.5, 4.5, by = 0.1)
P_N_seq <- seq(0.3, 0.6, by = 0.1)
N_seq <- seq(100, 300, by = 0.1)
length(P_C_seq)
length(P_N_seq)
length(N_seq)
(
price_parameters <- expand.grid(P_C = P_C_seq, P_N = P_N_seq, N = N_seq) %>%
tibble() %>%
arrange(P_C, P_N)
)
length(N_seq)
P_C_seq <- seq(2.5, 4.5, by = 0.1)
P_N_seq <- seq(0.3, 0.6, by = 0.1)
price_parameters <- expand.grid(P_C = P_C_seq, P_N = P_N_seq) %>%
tibble()
price_parameters <- expand.grid(P_C = P_C_seq, P_N = P_N_seq) %>%
tibble()
price_parameters
P_C_seq <- seq(2.5, 4.5, by = 0.1)
P_N_seq <- seq(0.3, 0.6, by = 0.1)
N_seq <- seq(100, 300, by = 0.1)
price_parameters
length(P_C_seq)
length(P_N_seq)
length(N_seq)
(
price_parameters <- expand.grid(P_C = P_C_seq, P_N = P_N_seq, N = N_seq) %>%
tibble() %>%
arrange(P_C, P_N)
)
data_A <- data.frame(a = c(1, 2), b = c("a", "b"))
data_A
data_B <- data.frame(c = c(-1, -2))
data_B
reshape::expand.grid.df(data_A, data_B)
install.packages("rehape")
install.packages("reshape")
reshape::expand.grid.df(data_A, data_B)
expand.grid(a = c(1, 2), b = c("a", "b"), c = c(-1, -2))
R: tinytex::install_tinytex()
tinytex::install_tinytex()
data_A <- wfer
View(data_main)
View(data_main)
View(opt_N)
View(data_main)
View(opt_N)
View(opt_N)
View(N_data)
View(data_B)
x <- runif(100)
y <- runif(100)
x <- runif(100)
y <- -x
var(y)
var(x)
var(x+y)
cov(x,y)
var(x) -2*cov(x,y) + var(y)
2*cov(x,y)
var(x)
var(y)
var
var(x) -2*cov(x,y) + var(y)
var(y)
var(x)
2*cov(x,y)
var(x) +2*cov(x,y) + var(y)
x <- runif(100)
y <- x + 0.3 * runif(100)
var(x)
var(y)
cov(, x, y)
cov(x, y)
matrix(nrow = 2c(var(x), cov(x,y), cov(x,y),var(y), )
matrix(c(var(x), cov(x,y), cov(x,y),var(y), nrow = 2)
)
matrix(c(var(x), cov(x,y), cov(x,y),var(y)), nrow=2)
library(readstata13)
data("MLB1", package = "wooldridge")
install.packages("wooldridge")
data("MLB1", package = "wooldridge")
data("MLB", package = "wooldridge")
?wooldridge
??wooldridge
data("mlb1", package = "wooldridge")
mlb_data <- mlb1
#--- run a rergession ---#
mlb_reg <- feols(log(salary) ~ years + gamesyr + bavg
+ hrunsyr + rbisyr, data = mlb_data)
library(feols)
library(fixest)
library(tidyverse)
#--- run a rergession ---#
mlb_reg <- feols(log(salary) ~ years + gamesyr + bavg
+ hrunsyr + rbisyr, data = mlb_data)
#--- take a look at the results ---#
tidy(mlb_reg)
library(broom)
#--- take a look at the results ---#
tidy(mlb_reg)
View(opt_N_all_ls)
res_u <- feols(log(salary) ~ years + gamesyr + bavg
+ hrunsyr + rbisyr, data = mlb_data)
#--- SSR ---#
sum(res_u$residuals^2)
sum(res_u$residuals^2)
res_r <- feols(log(salary) ~ years + gamesyr, data = mlb_data)
#--- SSR ---#
sum(res_r$residuals^2)
#--- unrestricted model ---#
reg_u <- feols(log(salary) ~ years + gamesyr +
bavg + hrunsyr + rbisyr, data = mlb_data)
SSR_u <- sum(reg_u$residuals^2)
#--- restricted model ---#
reg_r <- feols(log(salary) ~ years + gamesyr, data = mlb_data)
SSR_r <- sum(reg_r$residuals^2)
df_q <- 3 # the number of restrictions
df_ur <- degrees_freedom(reg_u, "resid") # degrees of freedom for the unrestricted model
df_ur
df_q
F_stat_num
F_stat_num <- (SSR_r - SSR_u) / df_q # numerator of F-stat
F_stat_num
df_ur
F_stat_denom <- SSR_u / df_ur # denominator of F-stat
F_stat_denom
F_sta <- F_stat_num / F_stat_denom # F-stat
F_sta
alpha <- 0.05 # 5%  significance level
1 - alpha
df_q
df_ur
c_value <- qf(1 - alpha, df1 = df_q, df2 = df_ur)
c_value
F_sta
mlb_data[,c("bavg", "hrunsyr", "rbisyr")]
mlb_data[,c("bavg", "hrunsyr", "rbisyr")] %>% cor()
N <- 300 # num observations
mu <- runif(N) # term shared by indep vars 1 and 2
x1 <- 0.1 * runif(N) + 2 * mu # indep 1
x2 <- 0.1 * runif(N) + 2 * mu # indep 2
x3 <- runif(N) # indep 3
rnorm
y <- 1 + x1 + x2 + x3 + u # generate y
N <- 300 # num observations
mu <- runif(N) # term shared by indep vars 1 and 2
x1 <- 0.1 * runif(N) + 2 * mu # indep 1
x2 <- 0.1 * runif(N) + 2 * mu # indep 2
x3 <- runif(N) # indep 3
u <- rnorm(N) # error
y <- 1 + x1 + x2 + x3 + u # generate y
data <- data.table(y = y, x1 = x1, x2 = x2, x3 = x3) # combine into a data.table
library(data.table)
data <- data.table(y = y, x1 = x1, x2 = x2, x3 = x3) # combine into a data.table
cor(x1, x2) # correlation between x1 and x2
reg_u <- feols(y ~ x1 + x2 + x3, data = data) # OLS
tidy(reg_u) # results
county_yield <- readRDS("/Users/tmieno2/Dropbox/TeachingUNL/Data-Science-with-R/Chapter-7-MakeTable_modelsummary/county_yield.rds"
) %>%
tibble() %>%
select(soy_yield, corn_yield, year, county_code, state_name, d0_5_9, d1_5_9, d2_5_9, d3_5_9, d4_5_9) %>%
filter(state_name %in% c("Nebraska", "Kansas", "Colorado"))
library(tidyverse)
county_yield <- readRDS("/Users/tmieno2/Dropbox/TeachingUNL/Data-Science-with-R/Chapter-7-MakeTable_modelsummary/county_yield.rds"
) %>%
tibble() %>%
select(soy_yield, corn_yield, year, county_code, state_name, d0_5_9, d1_5_9, d2_5_9, d3_5_9, d4_5_9) %>%
filter(state_name %in% c("Nebraska", "Kansas", "Colorado"))
county_yield <- readRDS("/Users/tmieno2/Dropbox/TeachingUNL/Data-Science-with-R/Chapter-7-MakeTable_modelsummary/county_yield.rds"
)
setwd("/Users/tmieno2/Dropbox/TeachingUNL/Data-Science-with-R/Chapter-7-MakeTable_modelsummary")
county_yield <- readRDS("county_yield.rds") %>%
tibble() %>%
select(soy_yield, corn_yield, year, county_code, state_name, d0_5_9, d1_5_9, d2_5_9, d3_5_9, d4_5_9) %>%
filter(state_name %in% c("Nebraska", "Kansas", "Colorado"))
county_yield <- readRDS("county_yield.rds") %>%
tibble() %>%
select(soy_yield, corn_yield, year, county_code, state_name, d0_5_9, d1_5_9, d2_5_9, d3_5_9, d4_5_9) %>%
filter(state_name %in% c("Nebraska", "Kansas", "Colorado"))
county_yield
county_yield
model_1_corn <- lm(corn_yield ~ d1_5_9 + d2_5_9, data = county_yield)
model_2_corn <- lm(corn_yield ~ d1_5_9 + d2_5_9 + d3_5_9 + d4_5_9, data = county_yield)
model_1_soy <- lm(soy_yield ~ d1_5_9 + d2_5_9, data = county_yield)
model_2_soy <- lm(soy_yield ~ d1_5_9 + d2_5_9 + d3_5_9 + d4_5_9, data = county_yield)
library(sandwich)
vcov_1_corn <- vcovHC(model_1_corn)
vcov_2_corn <- vcovHC(model_2_corn)
vcov_1_soy <- vcovHC(model_1_soy)
vcov_2_soy <- vcovHC(model_2_soy)
msummary(
list(model_2_corn, model_2_soy),
coef_omit ="d"
)
library(modelsummary)
install.packages("modelsummary")
library(modelsummary)
msummary(
list(model_2_corn, model_2_soy),
coef_omit ="d"
)
msummary(
list(model_2_corn, model_2_soy),
coef_omit ="_"
)
msummary(
list(model_2_corn, model_2_soy),
coef_omit ="("
)
msummary(
list(model_2_corn, model_2_soy),
coef_omit ="\("
msummary(
list(model_2_corn, model_2_soy),
coef_omit ="Int"
)
View(vcov_2_corn)
msummary(
list(model_2_corn, model_2_soy)
)
msummary(
list(model_2_corn, model_2_soy),
gof_omit ="IC|Adj|F|Log"
)
msummary(
list(model_2_corn, model_2_soy),
gof_omit ="IC|Adj|F|Log|RMSE"
)
round(3478354.45454, digits = 2)
round(4.45454, digits = 2)
#* load the package to access the data we want
library(wooldridge)
#* get big9salary
data("big9salary")
#* creat a variable that indicates university
#* this is how the data would like most of the time (instead of having bunch of dummy variables)
big9salary_c <-
as_tibble(big9salary) %>%
mutate(
university =
case_when(
osu == 1 ~ "Ohio State U",
iowa == 1 ~ "U of Iowa",
indiana == 1 ~ "Indiana U",
purdue == 1 ~ "Purdue U",
msu == 1 ~ "Michigan State U",
mich == 1 ~ "Michigan U",
wisc == 1 ~ "U of Wisconsin",
illinois == 1 ~ "U of Illinois"
)
) %>%
relocate(id, year, salary, pubindx, university)
big9salary_c
